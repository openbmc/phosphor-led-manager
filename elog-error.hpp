// This file was autogenerated.  Do not edit!
// See elog-gen.py for more details
#pragma once

#include <string>
#include <tuple>
#include <type_traits>
#include <sdbusplus/exception.hpp>
#include <phosphor-logging/log.hpp>
#include <phosphor-logging/elog.hpp>

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace fru
{
namespace fault
{
namespace Monitor
{
namespace Error
{
    struct LedFailure;
} // namespace Error
} // namespace Monitor
} // namespace fault
} // namespace fru
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus


namespace phosphor
{

namespace logging
{

namespace xyz
{
namespace openbmc_project
{
namespace fru
{
namespace fault
{
namespace Monitor
{
namespace _LedFailure
{

struct Error
{
    static constexpr auto str = "Error=%s";
    static constexpr auto str_short = "Error";
    using type = std::tuple<std::decay_t<decltype(str)>,const char*>;
    explicit constexpr Error(const char* a) : _entry(entry(str, a)) {};
    type _entry;
};

}  // namespace _LedFailure

struct LedFailure : public sdbusplus::exception_t
{
    static constexpr auto errName = "xyz.openbmc_project.fru.fault.Monitor.LedFailure";
    static constexpr auto errDesc = "A failure in initiating an LED action.";
    static constexpr auto L = level::INFO;
    using Error = _LedFailure::Error;
    using metadata_types = std::tuple<Error>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Monitor
} // namespace fault
} // namespace fru
} // namespace openbmc_project
} // namespace xyz


namespace details
{

template <>
struct map_exception_type<sdbusplus::xyz::openbmc_project::fru::fault::Monitor::Error::LedFailure>
{
    using type = xyz::openbmc_project::fru::fault::Monitor::LedFailure;
};

}


} // namespace logging

} // namespace phosphor
