{
  "comments": [
    {
      "key": {
        "uuid": "a95b2bc7_e7e87904",
        "filename": "fault-monitor/meson.build",
        "patchSetId": 24
      },
      "lineNbr": 2,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "will this be cleaned as part of completing the build ?",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da4b1d51_d6bda98b",
        "filename": "fault-monitor/meson.build",
        "patchSetId": 24
      },
      "lineNbr": 2,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "No, it will generate the following file:\n\nfault-monitor/xyz/openbmc_project/Led/Fru/Monitor/error.hpp\nfault-monitor/xyz/openbmc_project/Led/Fru/Monitor/error.cpp\nfault-monitor/xyz/openbmc_project/Led/Mapper/error.hpp\nfault-monitor/xyz/openbmc_project/Led/Mapper/error.cpp",
      "parentUuid": "a95b2bc7_e7e87904",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe730da_70ac85d6",
        "filename": "fault-monitor/meson.build",
        "patchSetId": 24
      },
      "lineNbr": 2,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-12T10:43:08Z",
      "side": 1,
      "message": "right.. I get it.. I\u0027m asking if these files get cleaned after compilation . They were getting cleaned in auto_tools version.\n\nCLEANFILES \u003d ${BUILT_SOURCES}",
      "parentUuid": "da4b1d51_d6bda98b",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c4389aa_02753dd1",
        "filename": "fault-monitor/meson.build",
        "patchSetId": 24
      },
      "lineNbr": 14,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "Also : where is the equivalent of _CFLAGS and _LDFLAGS that we had in auto tools version.",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30d61a58_c66613df",
        "filename": "fault-monitor/meson.build",
        "patchSetId": 24
      },
      "lineNbr": 14,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-led-manager/+/37661/24/meson.build#52",
      "parentUuid": "5c4389aa_02753dd1",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a99bc4b_89113b30",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 9,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "I did not see this in some other repos. Is there anything that is demanding this to be explicitly specified ?",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b912ec4a_c5d45bdb",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 9,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "This is ManojKiran\u0027s suggestion ðŸ˜Š\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-led-manager/+/37661/2/meson.build#1",
      "parentUuid": "8a99bc4b_89113b30",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c62cc813_0ae53a5e",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 9,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-12T10:43:08Z",
      "side": 1,
      "message": "okay .. @Manoj : May I know why this is needed ?",
      "parentUuid": "b912ec4a_c5d45bdb",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7121b1fe_c68b022d",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 9,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-01-12T15:25:49Z",
      "side": 1,
      "message": "meson default build type is debug(which does not have any optimization at all) if nothing is specified, where as debugoptimized enables -O2 optimization during build time.\n\nwhen this repo is pulled and compiled in yocto environment, it forces an \"-O2\" optimization for all the repos while compiling for bmc.\n\nI idea behind explicitly mentioning the buildtype as debugoptimized would force the \"repo specific docker CI\" as well to do a similar build as yocto by enforcing an -O2. Its not a standard as such, but recent repos that are migrated to meson have been following this.",
      "parentUuid": "c62cc813_0ae53a5e",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a807264_a68415d4",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 19,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "Is there a way where we can add comments to these like how we could add in configure.ac\n\nExample reference: \nAC_DEFINE(CALLOUT_FWD_ASSOCIATION, \"callout\", [The name of the callout\u0027s forward association.])",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52354096_812a9e8e",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 19,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "We can not add comments in the set_quoted method.\nhttps://mesonbuild.com/Reference-manual.html#files\n`set_quoted(varname, value) is same as set but quotes the value in double quotes (\")`\n\nWe can define it in the `meson_options.txt`, but i dont think this is a good way, because the value defined in the `meson_options.txt` file can be changed.",
      "parentUuid": "2a807264_a68415d4",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1f64859_39b79f26",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "what about the usage of WANTS_JSON ?",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50373af9_b740ae52",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "No, I do not think need to add `WANTS_JSON` in meson.build file.\n\nIf we enable `use-json`, it won\u0027t be ran L:60-67.",
      "parentUuid": "a1f64859_39b79f26",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a83fccdc_80c9bdc6",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 25,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "Also, need to add the use-lamp-test",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc6b791a_05b0d563",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 25,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "Right, Maybe this commit is too early.\nDone.",
      "parentUuid": "a83fccdc_80c9bdc6",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c96bff7c_0aa087bc",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 28,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "Missing : YAML_PATH . how is this handled ?.. This is what gets passed from  .bb file",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1703631_236bf95f",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 28,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c96bff7c_0aa087bc",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bab30b8c_219cadb2",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "Just for my understanding, why are we not always putting the dependency by default ?",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4615984a_8c6c09da",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "Sorry, This is ManojKiran\u0027s suggestion ðŸ˜Š\n\nSee: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-led-manager/+/37661/6/meson.build#65",
      "parentUuid": "bab30b8c_219cadb2",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "279d8590_b301e46b",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-12T10:43:08Z",
      "side": 1,
      "message": "Okay.. @Manoj : May I know why this is needed than always putting a dependency ?",
      "parentUuid": "4615984a_8c6c09da",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84f926f7_8c5bb698",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2021-01-12T15:25:49Z",
      "side": 1,
      "message": "By, having it this way, if nlohmann-json package is not present in the development machine/sdk, it will not break the compilation throwing an error , instead it fetches the nlohmann-json headers and then include them in the headers and proceeds for compilation.\n\nThis is a new feature in meson..by which we can automatically download the dependencies during the configure step if they are not found the machine.\n\nAgain, this is a new feature in meson \u0026 it does not harm us in anyway..but something nice to have.",
      "parentUuid": "279d8590_b301e46b",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77b88a4c_4a1eb289",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 76,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "hmm.. But this is only if WANTS_JSON \u003d\u003d false right ?.\n\nAlso why is it not .hpp but _hpp ? And this is a generated file",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5313c2fe_29807af6",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 76,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "\u003e hmm.. But this is only if WANTS_JSON \u003d\u003d false right ?.\n\nNo, if if get_option(\u0027use-json\u0027).disabled()\n`sources +\u003d [led_gen_hpp]`\n\n\u003e Also why is it not .hpp but _hpp ? And this is a generated file\n\nNo, this is custom target, See: https://mesonbuild.com/Reference-manual.html#custom_target",
      "parentUuid": "77b88a4c_4a1eb289",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "705b14f8_ed10da55",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 80,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-01-11T13:45:51Z",
      "side": 1,
      "message": "We also need to take care of : scripts/led-set-all-groups-asserted.sh",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c4a717b_5f488f0d",
        "filename": "meson.build",
        "patchSetId": 24
      },
      "lineNbr": 80,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-01-12T07:43:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "705b14f8_ed10da55",
      "revId": "3639101859c77e25562d8dd38176771c0873a9ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}